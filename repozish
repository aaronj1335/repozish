#!/bin/bash -e

dolla_zero="`basename $0`"
run_control="$HOME/.${dolla_zero}rc"
doc_run_control="`echo $run_control | sed "s|$HOME|~|"`"
mode=set

USAGE="
\`$dolla_zero(1)\` -- mac os x window layout utility
====================================================

## synopsis

    $dolla_zero [-hg] [-a <app1>,<app2>,...] [<profile>]

## description

nerd alert! \`$dolla_zero(1)\` repositions the windows of your applications to
your preferred layout.

## getting the positions and sizes of windows:

executing the following:

    $dolla_zero -g -a Safari,Terminal,Twitter,MacVim

will get the current positions and sizes of the listed applications, and write
them to your \`$doc_run_control\` file.

## setting the positions and sizes of windows:

executing the following:

    $dolla_zero

will read the positions of the files in \`$doc_run_control\` and position and
size the apps accordingly.

## other notes

\`$dolla_zero(1)\` only operates on the front window of applications. it may not
work as desired with applications that have more than one window.

\`$dolla_zero(1)\` will first use the application list passed in with the '-a'
flag. if the '-a' flag isn't given, it will use the apps listed in
\`$doc_run_control\`. otherwise it'll just like crash or something.

you may optionally specify a profile name. for instance if you want a different
window layout when you've got an external monitor.

    $dolla_zero -ga Safari,Terminal,Twitter,MacVim external_monitor
    $dolla_zero external_monitor

## options

    -a  the list of applications to reposition
    -g  get the current window positions and size and write them to
        $doc_run_control
    -h  Show this help message"

# Parse command line options.
while getopts hga: OPT; do
    case "$OPT" in
        h)
            echo "$USAGE"
            exit 0
            ;;
        g)
            mode=get
            ;;
        a)
            apps="`echo $OPTARG | tr ',' ' '`"
            ;;
        \?)
            # getopts issues an error message
            echo "$USAGE" >&2
            exit 1
            ;;
    esac
done

# Remove the switches we parsed above.
shift `expr $OPTIND - 1`

if [ $1 ]; then
  profile="$1"
else
  profile=_default
fi

if [ ! "$apps" ]; then
  apps="`grep $profile $run_control | cut -d' ' -f2`"
fi

set_dims() {
  osascript -e "tell application \"$1\" to set the bounds of the front window to {$2}"
}

get_dims() {
  osascript -e "tell application \"$1\" to get the bounds of the front window"
}

if [ $mode = get ]; then
  # ( rm -f $run_control || true ) && touch $run_control
  run_control_tmp="`mktemp /tmp/$dolla_zero.XXXX`"
  [ -e $run_control ] && cat $run_control | grep -v $profile > $run_control_tmp
  for app in $apps; do
    dims=`get_dims $app 2>/dev/null || true`
    if [ "$dims" ]; then
      echo -n "$profile $app " >> $run_control_tmp
      echo $dims >> $run_control_tmp
    fi
  done
  mv $run_control_tmp $run_control
else
  for app in $apps; do
    dims="`grep \"$profile $app\" $run_control | cut -d' ' -f3,4,5,6`"
    set_dims "$app" "$dims" || true
  done
fi


